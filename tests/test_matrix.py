import unittest
from cqmore.matrix import Matrix3D, identity, mirror, rotation, rotationX, rotationY, rotationZ, scaling, translation
from cqmore.polyhedron import tetrahedron, uvSphere

class TestMatrix(unittest.TestCase):
    def test_Matrix3D(self):
        m = [
            [1, 0, 0, 5],
            [0, 1, 0, 5],
            [0, 0, 1, 5],
            [0, 0, 0, 1]
        ]
        m3d = Matrix3D(m)     

        self.assertListEqual(m, m3d.wrapped.tolist())


    def test_transform(self):
        translation = Matrix3D([
            [1, 0, 0, 5],
            [0, 1, 0, 5],
            [0, 0, 1, 5],
            [0, 0, 0, 1]
        ])

        translated = translation.transform((10, 20, 30)) 
        self.assertEqual((15, 25, 35), translated)


    def test_transformAll(self):
        translation = Matrix3D([
            [1, 0, 0, 5],
            [0, 1, 0, 5],
            [0, 0, 1, 5],
            [0, 0, 0, 1]
        ])

        points = [(10, 20, 30), (0, 0, 0), (-10, -20, -30)]
        translated = translation.transformAll(points) 
        self.assertTupleEqual(((15, 25, 35), (5, 5, 5), (-5, -15, -25)), translated)


    def test_identity(self):
        m = identity()
        self.assertListEqual([
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ], m.wrapped.tolist())


    def test_scaling(self):
        sphere = uvSphere(1)
        m = scaling((2, 1, 1)) 
        scaled_points = m.transformAll(sphere.points)
        
        expected = ((2.0, 0.0, 6.123233995736766e-17), (-0.9999999999999996, 0.8660254037844387, 6.123233995736766e-17), (-1.0000000000000009, -0.8660254037844385, 6.123233995736766e-17), (0, 0, -1), (0, 0, 1))
        self.assertTupleEqual(expected, scaled_points)


    def test_translation(self):
        sphere = uvSphere(1, widthSegments = 12, heightSegments = 6)

        m = translation((3, 0, 0))
        translated = m.transformAll(sphere.points)
        
        expected = ((3.5000000000000004, 0.0, -0.8660254037844385), (3.4330127018922196, 0.2500000000000001, -0.8660254037844385), (3.25, 0.4330127018922196, -0.8660254037844385), (3.0, 0.5000000000000003, -0.8660254037844385), (2.75, 0.43301270189221963, -0.8660254037844385), (2.5669872981077804, 0.25000000000000033, -0.8660254037844385), (2.4999999999999996, 6.12323399573677e-17, -0.8660254037844385), (2.5669872981077804, -0.25, -0.8660254037844385), (2.7499999999999996, -0.4330127018922195, -0.8660254037844385), (3.0, -0.5000000000000003, -0.8660254037844385), (3.25, -0.4330127018922198, -0.8660254037844385), (3.4330127018922196, -0.2500000000000004, -0.8660254037844385), (3.866025403784439, 0.0, -0.4999999999999998), (3.75, 0.4330127018922193, -0.4999999999999998), (3.4330127018922196, 0.75, -0.4999999999999998), (3.0, 0.8660254037844387, -0.4999999999999998), (2.566987298107781, 0.7500000000000001, -0.4999999999999998), (2.25, 0.43301270189221963, -0.4999999999999998), (2.133974596215561, 1.0605752387249069e-16, -0.4999999999999998), (2.25, -0.43301270189221913, -0.4999999999999998), (2.5669872981077804, -0.7499999999999999, -0.4999999999999998), (3.0, -0.8660254037844387, -0.4999999999999998), (3.4330127018922187, -0.7500000000000004, -0.4999999999999998), (3.75, -0.43301270189221974, -0.4999999999999998), (4.0, 0.0, 6.123233995736766e-17), (3.866025403784439, 0.49999999999999994, 6.123233995736766e-17), (3.5, 0.8660254037844386, 6.123233995736766e-17), (3.0, 1.0, 6.123233995736766e-17), (2.5, 0.8660254037844387, 6.123233995736766e-17), (2.1339745962155616, 0.5000000000000003, 6.123233995736766e-17), (2.0, 1.2246467991473532e-16, 6.123233995736766e-17), (2.133974596215561, -0.4999999999999997, 6.123233995736766e-17), (2.4999999999999996, -0.8660254037844385, 6.123233995736766e-17), (3.0, -1.0, 6.123233995736766e-17), (3.499999999999999, -0.866025403784439, 6.123233995736766e-17), (3.8660254037844384, -0.5000000000000004, 6.123233995736766e-17), (3.8660254037844384, 0.0, 0.5000000000000001), (3.75, 0.43301270189221924, 0.5000000000000001), (3.4330127018922196, 0.7499999999999999, 0.5000000000000001), (3.0, 0.8660254037844386, 0.5000000000000001), (2.566987298107781, 0.75, 0.5000000000000001), (2.25, 0.4330127018922196, 0.5000000000000001), (2.1339745962155616, 1.0605752387249068e-16, 0.5000000000000001), (2.25, -0.4330127018922191, 0.5000000000000001), (2.5669872981077804, -0.7499999999999998, 0.5000000000000001), (3.0, -0.8660254037844386, 0.5000000000000001), (3.4330127018922187, -0.7500000000000003, 0.5000000000000001), (3.7499999999999996, -0.4330127018922197, 0.5000000000000001), (3.5, 0.0, 0.8660254037844387), (3.433012701892219, 0.24999999999999994, 0.8660254037844387), (3.25, 0.43301270189221924, 0.8660254037844387), (3.0, 0.49999999999999994, 0.8660254037844387), (2.75, 0.4330127018922193, 0.8660254037844387), (2.566987298107781, 0.2500000000000001, 0.8660254037844387), (2.5, 6.123233995736765e-17, 0.8660254037844387), (2.566987298107781, -0.24999999999999983, 0.8660254037844387), (2.75, -0.4330127018922192, 0.8660254037844387), (3.0, -0.49999999999999994, 0.8660254037844387), (3.2499999999999996, -0.43301270189221946, 0.8660254037844387), (3.433012701892219, -0.25000000000000017, 0.8660254037844387), (3, 0, -1), (3, 0, 1))
        self.assertTupleEqual(expected, translated)


    def test_mirror(self):
        t = tetrahedron(1)

        mirrored = mirror((1, 0, 0)).transformAll(t.points)

        expected = ((-0.5773502691896258, 0.5773502691896258, 0.5773502691896258), (0.5773502691896258, -0.5773502691896258, 0.5773502691896258), (0.5773502691896258, 0.5773502691896258, -0.5773502691896258), (-0.5773502691896258, -0.5773502691896258, -0.5773502691896258))
        self.assertTupleEqual(expected, mirrored)


    def test_rotationX(self):
        t = tetrahedron(1)
        rotated = rotationX(90).transformAll(t.points)

        expected = ((0.5773502691896258, -0.5773502691896258, 0.5773502691896258), (-0.5773502691896258, -0.5773502691896258, -0.5773502691896258), (-0.5773502691896258, 0.5773502691896258, 0.5773502691896258), (0.5773502691896258, 0.5773502691896258, -0.5773502691896258))
        self.assertTupleEqual(expected, rotated)


    def test_rotationY(self):
        t = tetrahedron(1)
        rotated = rotationY(90).transformAll(t.points)

        expected = ((0.5773502691896258, 0.5773502691896258, -0.5773502691896258), (0.5773502691896258, -0.5773502691896258, 0.5773502691896258), (-0.5773502691896258, 0.5773502691896258, 0.5773502691896258), (-0.5773502691896258, -0.5773502691896258, -0.5773502691896258))
        self.assertTupleEqual(expected, rotated)


    def test_rotationZ(self):
        t = tetrahedron(1)
        rotated = rotationZ(90).transformAll(t.points)

        expected = ((-0.5773502691896258, 0.5773502691896258, 0.5773502691896258), (0.5773502691896258, -0.5773502691896258, 0.5773502691896258), (-0.5773502691896258, -0.5773502691896258, -0.5773502691896258), (0.5773502691896258, 0.5773502691896258, -0.5773502691896258))
        self.assertTupleEqual(expected, rotated)


    def test_rotation(self):
        t = tetrahedron(1)
        rotated = rotation((10, 10, 10), 90).transformAll(t.points)

        expected = ((0.5773502691896258, 0.5773502691896258, 0.5773502691896258), (0.47421657693679153, -0.8591167563965422, -0.19245008972987518), (-0.8591167563965422, -0.1924500897298752, 0.47421657693679153), (-0.1924500897298752, 0.47421657693679153, -0.8591167563965422))
        self.assertTupleEqual(expected, rotated)


if __name__ == '__main__':
    unittest.main()
